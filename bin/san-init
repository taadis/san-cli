#!/usr/bin/env node

var exists = require('fs').existsSync
var rm = require('rimraf').sync
var programUtil = require('../lib/commander-util')
var program = require('commander')
var path = require('path')
var downloaodGitRepo = require('download-git-repo')
var ora = require('ora')
var Khaos = require('khaos')
//var metalsmithIgnore = require('metalsmith-ignore')
var userHome = require('user-home')

/**
 * 使用帮助
 * 补充示例,以便查看和使用.
 */
program.on('--help', function () {
    console.log();
    console.log('  Examples:');
    console.log();
    console.log('    # show san init help');
    console.log('    $ san init --help');
    console.log();
    console.log('    # initialcal a project with an official template');
    console.log('    $ san init sanApp --template=simple');
    console.log();
});

program
    .usage('<project> [options...]')
    .description('san init is a tool.');
    
program
    .command('<project> [options...]', 'specify project name and options',)
    .option('-t, --template [template]', 'specify official tempalte.')
    .action(function(project, ...options){
        doInit(project, ...options);
    });

program
    .parse(process.argv);

/**
 * 执行初始化
 * @param project 项目名称
 * @param options 可用选项
 */
 function doInit(project, ...options){
    if(!project){
        console.log();
        console.log('   Please enter the name of the project');
        console.log();
        return;
    }

    var opts = program.opts();
    var cwd = process.cwd();
    var basename = path.basename(cwd, path.sep);

    if(opts.template){
        // 若指定了模板,则下载对应模板并生成
        downloadAndInitProject(opts.template, project);
    }
    else{
        console.log();
        console.log('   Waring:option --template has not value.');
        console.log();
    }
 }

 /**
  * 下载指定的模版并初始化项目
  * @param template 模板名称
  * @param name 项目名称
  */
function downloadAndInitProject(template, name) {
    var spinner = ora('downloading template...');
    spinner.start();

    // github模版路径
    var templatePath = "san-templates/" + template;

    // 用户目录临时模版路径    
    var tmpPath = path.join(userHome, ".san-templates", template);

    // 若本地模版已存在,则先删除.    
    if (exists(tmpPath)) {
        rm(tmpPath);
    }
    
    downloaodGitRepo(templatePath, tmpPath, function (error) {
        spinner.stop();
        if (error) {
            // 下载失败
            console.log("Donwload failure: " + error.message);
            throw error;
        }
        // 下载成功,生成            
        var cwd = process.cwd();           
        var destPath = path.join(cwd, name);
        var khaos = new Khaos(path.join(tmpPath, 'template'));

        // 指定 khaos 的模式,模式数据从当前临时模版的根目录下的khaos.json中获取.
        var tmpkhaosJsonPath = path.join(tmpPath, 'khaos.json');
        var tmpkhaosJson = require(tmpkhaosJsonPath) || {};
        khaos.schema(tmpkhaosJson.schema || {});

        // 在khaos解析streams中的占位符{{}}前,把一些源代码文件移除,规避san {{}}和占位符{{}}冲突
        // 没啥用?            
        /*var tmpIgnores = ['*.js'];
        khaos.metalsmith.use(metalsmithIgnore(tmpIgnores));
        */
        /*    
        khaos.before(function (files, metalsmith) {
            var tmpIgnores = tmpkhaosJson.ignore || {};
            tmpIgnores = ['*'];
            metalsmith.use(metalsmithIgnore(tmpIgnores)).build();
        });*/

        //
        khaos.generate(destPath, function (error) {
            if (error) {
                console.log("Generate failure:", error.message);
                throw error;
            }
            console.log();
            console.log('  Init Completed!');
            console.log();
        });
    });
}
