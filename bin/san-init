#!/usr/bin/env node

var exists = require('fs').existsSync
var rm = require('rimraf').sync
var programUtil = require('../lib/commander-util')
var program = require('commander')
var path = require('path')
var downloaodGitRepo = require('download-git-repo')
var ora = require('ora')
var Khaos = require('khaos')
//var metalsmithIgnore = require('metalsmith-ignore')
var userHome = require('user-home')

/**
 * 使用帮助
 * 补充示例,以便查看和使用.
 */
program.on('--help', function () {
    console.log();
    console.log('  Examples:');
    console.log();
    console.log('    # initialcal a project in the current directory');
    console.log('    $ san init');
    console.log();
    console.log('    # initialcal a project with new project name');
    console.log('    $ san init --name=app');
    console.log();
    console.log('    # initialcal a project with an official template');
    console.log('    $ san init --template=simple');
    console.log();
});

program
    .usage('[options...]')
    .description('san init is a tool.')
    .option('-p, --project [project]', 'specify project name.')
    .option('-t, --template [template]', 'specify official tempalte.')
    .parse(process.argv);

/**
 * 当命令行参数个数不足时,则输出当前命令的帮助信息
 * 比如:
 * - 输入`san init`时,则输出帮助信息.
 */
var opts = program.opts();
var hasUserOpts = programUtil.hasUserOpts(opts);
if (!hasUserOpts) {
    return program.help();
}

var cwd = process.cwd();
var basename = path.basename(cwd, path.sep);

//console.log('program.project=%s', program.project || null);
//console.log('program.template=%s', program.template || null);

downloadAndInitProject(opts.template, opts.project);
/**
 * 变量,规避命令行参数个数不定时的取值问题,以便后续使用.
 */
var varOptions = {
    gitReposUrl: null, // san-templates git repos url
    clone: false,
    template: null,
    name: null,
    namePath: null,
    userHome: userHome, // 用户目录,以便后续管理临时模版文件
    tmpPath: ''//path.join(userHome, '.san-templates', program.template)
};

// 项目名称
/**
 * 用户已输入项目名称,则继续.
 * 用户未输入项目名称,则使用当前目录名做为项目名称.
 */
/*
console.log(program.args);
console.log(program.arguments);
var cwd = process.cwd();
var basename = path.basename(cwd, path.sep);
console.log('basename=' + basename);
var name = program.name || basename;
if(program.name){
    // 用户已输入项目名称,则继续
    name = program.name;
}
else{
    // 用户未输入项目名称,则使用当前目录名做为项目名称.
    name = basename;
}
*/

/**
 * 下载指定的模版并初始化项目
 *
 */
function downloadAndInitProject(template, name) {
    var spinner = ora('downloading template...');
    spinner.start();

    // github模版路径
    var templatePath = "san-templates/" + template;
    // 用户目录临时模版路径
    var tmpPath = path.join(userHome, ".san-templates", template);
    // 若本地模版已存在,则先删除.
    if (exists(tmpPath)) {
        rm(tmpPath);
    }
    downloaodGitRepo(templatePath, tmpPath, function (error) {
        spinner.stop();
        if (error) {
            // 下载失败
            console.log("Donwload failure: " + error.message);
            throw error;
        }
        // 下载成功,生成                       
        var destPath = path.join(cwd, name);
        var khaos = new Khaos(path.join(tmpPath, 'template'));

        // 指定 khaos 的模式,模式数据从当前临时模版的根目录下的khaos.json中获取.
        var tmpkhaosJsonPath = path.join(tmpPath, 'khaos.json');
        var tmpkhaosJson = require(tmpkhaosJsonPath) || {};
        khaos.schema(tmpkhaosJson.schema || {});

        // 在khaos解析streams中的占位符{{}}前,把一些源代码文件移除,规避san {{}}和占位符{{}}冲突
        // 没啥用?            
        /*var tmpIgnores = ['*.js'];
        khaos.metalsmith.use(metalsmithIgnore(tmpIgnores));
        */
        /*    
        khaos.before(function (files, metalsmith) {
            var tmpIgnores = tmpkhaosJson.ignore || {};
            tmpIgnores = ['*'];
            metalsmith.use(metalsmithIgnore(tmpIgnores)).build();
        });*/

        // 
        var destPath = path.join(cwd, name);
        khaos.generate(destPath, function (error) {
            if (error) {
                console.log("Generate failure:", error.message);
                throw error;
            }
            console.log();
            console.log('  Init Completion!');
            console.log();
        });
    });
}
